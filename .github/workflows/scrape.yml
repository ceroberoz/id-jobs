name: Scrape Job Data

on:
  push:
    branches:
      - master
  pull_request_target:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MEONG }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "pip"

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt scrapy pandas google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client
          playwright install
        env:
          PIP_CACHE_DIR: .pip_cache

      - name: Validate Python installation
        run: |
          python --version
          pip --version

      - name: Run scraping script
        run: ./scrape.sh

      - name: Check for CSV files
        run: |
          if ls output/*.csv 1> /dev/null 2>&1; then
            echo "CSV files found."
          else
            echo "No CSV files found. Exiting."
            exit 1
          fi

      - name: Move CSV files to public directory
        run: |
          mkdir -p public
          mv output/*.csv public/

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/*.csv
          git commit -m "[skip ci] Updated job data" || echo "No changes to commit"
          git push

      - name: Extract Service Account Info
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > sa_key.json
          echo "SA_EMAIL=$(jq -r .client_email sa_key.json)" >> $GITHUB_ENV
          echo "SA_KEY=$(jq -r .private_key sa_key.json | base64 -w 0)" >> $GITHUB_ENV
        shell: bash

      - name: Upload CSV to Spreadsheet
        if: success()
        uses: canonical-web-and-design/csv-to-google-spreadsheet@1.0.0
        with:
          csv_path: public/merged.csv
          spreadsheet_id: ${{ secrets.GOOGLE_SHEET_ID }}
          worksheet: 0
          google_service_account_email: ${{ env.SA_EMAIL }}
          google_service_account_private_key: ${{ env.SA_KEY }}
        env:
          PRIVATE_KEY_DECODER: base64 -d
